#! /usr/bin/env python3

import argparse
from sys import argv

import os.path

from plenum.common.script_helper import storeNodeStewardMapping, getStewardKeyFromName, initKeep, \
    printNodeGenesisTrans
from plenum.common.util import getConfig
from plenum.common.types import CLIENT_STACK_SUFFIX

config = getConfig()
keepDir = os.path.expanduser(config.baseDir)


if __name__ == "__main__":
    if not os.path.exists(keepDir):
        os.makedirs(keepDir, exist_ok=True)

    parser = argparse.ArgumentParser(
        description="Generate steward key")

    parser.add_argument('name', action="store")
    parser.add_argument('--seeds', required=False, type=str, nargs=2, help='seeds for keypairs')
    parser.add_argument('--ip', required=False, type=str, help='node ip address')
    parser.add_argument('--port', required=False, type=str, help='node port')
    parser.add_argument('--clientip', required=False, type=str, help='client ip address')
    parser.add_argument('--clientport', required=False, type=str, help='client port')
    parser.add_argument('--steward', required=True, help="steward's verification key")
    parser.add_argument('--force', help='overrides keys', action='store_true')

    args = parser.parse_args()
    name = argv[1]

    # Initialize node stack

    # storeNodeStewardMapping(config.baseDir, name, args.steward)

    pubkey, verkey = None, None
    privSeed = None
    signSeed = None
    if args.seeds:
        privSeed, signSeed = args.seeds[0], args.seeds[1]

    stewardverkey = None
    try:
        if int(args.steward) == 64:
            stewardverkey = args.steward
        else:
            stewardverkey =  getStewardKeyFromName(config.baseDir, args.steward)
    except ValueError as ex:
        stewardverkey = getStewardKeyFromName(config.baseDir, args.steward)
    except Exception as ex:
        print(ex)
        exit()

    pubkey, verkey = None, None

    # Initialize node stack
    print("For node stack, stack name is", args.name)
    try:
        pubkey, verkey = initKeep(args.name, keepDir, privSeed, signSeed, args.force)
    except Exception as ex:
        print(ex)
        exit()

    # Initialize client stack
    print("For client stack, stack name is", args.name + CLIENT_STACK_SUFFIX)
    try:
        initKeep(args.name + CLIENT_STACK_SUFFIX, keepDir, privSeed, signSeed, args.force)
    except Exception as ex:
        print(ex)
        exit()

    # Print genesis transaction commands
    try:
        printNodeGenesisTrans(config.baseDir, args.name, verkey, pubkey, stewardverkey, args.ip, args.port, args.clientip, args.clientport)
    except Exception as ex:
        print(ex)
        exit()
