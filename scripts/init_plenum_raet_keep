#! /usr/bin/env python3

import argparse
import os.path

from plenum.common.script_helper import initKeep, getAddGenesisNewStewardCommand, getAddGenesisNewNodeCommand
from plenum.common.util import getConfig
from plenum.common.types import CLIENT_STACK_SUFFIX

config = getConfig()
keepDir = os.path.expanduser(config.baseDir)


def printGenesisTrans(type, name, verkey, pubkey, stewardverkey, nodeip, nodeport):
    if type == 'steward':
        print(getAddGenesisNewStewardCommand(name, verkey, pubkey))
    elif type == 'node':
        print(getAddGenesisNewNodeCommand(name, verkey, pubkey, stewardverkey, nodeip, nodeport, None, None))


if __name__ == "__main__":
    if not os.path.exists(keepDir):
        os.makedirs(keepDir, exist_ok=True)

    parser = argparse.ArgumentParser(
        description="Generate keys for a node's stacks "
                    "by taking the node's name and 2 "
                    "seed values")

    parser.add_argument('--type', required=True, help='steward or node')
    parser.add_argument('--stewardverkey', required=False, help="in case of node, requires steward's ver key")
    parser.add_argument('--nodeip', required=False, help="node ip address")
    parser.add_argument('--nodeport', required=False, help="node port")
    parser.add_argument('--name', required=True, help='node name')
    parser.add_argument('--seeds', required=True, type=str, nargs=2, help='seeds for keypairs')
    parser.add_argument('--force', help='overrides keys', action='store_true')

    args = parser.parse_args()

    # Initialize node stack
    print("For node stack, stack name is", args.name)
    pubkey, verkey = None, None

    try:
        pubkey, verkey = initKeep(keepDir, args.name, args.seeds[0], args.seeds[1], args.force)
    except Exception as ex:
        print(ex)
        exit()

    # Initialize client stack
    print("For client stack, stack name is", args.name + CLIENT_STACK_SUFFIX)
    try:
        initKeep(keepDir, args.name + CLIENT_STACK_SUFFIX, args.seeds[0],
             args.seeds[1], args.force)
    except Exception as ex:
        print(ex)
        exit()

    # Print genesis transaction commands
    try:
        printGenesisTrans(args.type, args.name, verkey, pubkey, args.stewardverkey, args.nodeip, args.nodeport)
    except Exception as ex:
        print(ex)
        exit()
